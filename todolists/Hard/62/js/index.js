(function() {
  var TodoApp, TodoList, a, button, div, example, form, h2, input, li, todoApp, ul;

  ({ul, li, div, h2, form, input, a, button} = React.DOM);

  TodoList = React.createClass({
    displayName: "TodoList",
    render: function() {
      var createItem;
      console.log("TodoList.render called");
      createItem = function(itemText) {
        return li({}, itemText);
      };
      return ul({}, this.props.items.map(createItem));
    }
  });

  TodoApp = React.createClass({
    getInitialState: function() {
      return {
        items: [],
        text: ""
      };
    },
    displayName: "TodoApp",
    onChange: function(e) {
      console.log(`changing to ${e.target.value}`);
      return this.setState({
        text: e.target.value
      });
    },
    handleSubmit: function(e) {
      var nextItems, nextText;
      console.log("handleSubmit", e);
      e.preventDefault();
      nextItems = this.state.items.concat([this.state.text]);
      nextText = "";
      return this.setState({
        items: nextItems,
        text: nextText
      });
    },
    render: function() {
      return div({}, h2({}, "Todo List"), TodoList({
        items: this.state.items
      }), form({
        onSubmit: this.handleSubmit
      // TODO Turn all these div calls into helpers
      }, div({
        className: "row"
      }, div({
        className: "columns large-12"
      }, div({
        className: "row collapse postfix-radius"
      }, div({
        className: "small-9 columns"
      }, input({
        onChange: this.onChange,
        value: this.state.text,
        placeholder: "add taskâ€¦",
        type: "text"
      })), div({
        className: "small-3 columns"
      }, a({
        className: "button postfix",
        onClick: this.handleSubmit
      }, `Add #${this.state.items.length + 1}`)))))));
    }
  });

  example = document.getElementById("example");

  todoApp = React.createElement(TodoApp, null);

  React.render(todoApp, example);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiPGFub255bW91cz4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUE7O0VBQUEsQ0FBQSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsR0FBVCxFQUFjLEVBQWQsRUFBa0IsSUFBbEIsRUFBd0IsS0FBeEIsRUFBK0IsQ0FBL0IsRUFBa0MsTUFBbEMsQ0FBQSxHQUE0QyxLQUFLLENBQUMsR0FBbEQ7O0VBRUEsUUFBQSxHQUFXLEtBQUssQ0FBQyxXQUFOLENBQ1Q7SUFBQSxXQUFBLEVBQWEsVUFBYjtJQUVBLE1BQUEsRUFBUSxRQUFBLENBQUEsQ0FBQTtBQUNOLFVBQUE7TUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLHdCQUFaO01BQ0EsVUFBQSxHQUFhLFFBQUEsQ0FBQyxRQUFELENBQUE7ZUFDWCxFQUFBLENBQUcsQ0FBQSxDQUFILEVBQU8sUUFBUDtNQURXO2FBRWIsRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsVUFBakIsQ0FBUDtJQUpNO0VBRlIsQ0FEUzs7RUFTWCxPQUFBLEdBQVUsS0FBSyxDQUFDLFdBQU4sQ0FDUjtJQUFBLGVBQUEsRUFBaUIsUUFBQSxDQUFBLENBQUE7YUFDZjtRQUFDLEtBQUEsRUFBTyxFQUFSO1FBQVksSUFBQSxFQUFNO01BQWxCO0lBRGUsQ0FBakI7SUFHQSxXQUFBLEVBQWEsU0FIYjtJQUtBLFFBQUEsRUFBVSxRQUFBLENBQUMsQ0FBRCxDQUFBO01BQ1IsT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFBLFlBQUEsQ0FBQSxDQUFlLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBeEIsQ0FBQSxDQUFaO2FBQ0EsSUFBQyxDQUFBLFFBQUQsQ0FBVTtRQUFBLElBQUEsRUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDO01BQWYsQ0FBVjtJQUZRLENBTFY7SUFTQSxZQUFBLEVBQWMsUUFBQSxDQUFDLENBQUQsQ0FBQTtBQUNaLFVBQUEsU0FBQSxFQUFBO01BQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxjQUFaLEVBQTRCLENBQTVCO01BQ0EsQ0FBQyxDQUFDLGNBQUYsQ0FBQTtNQUNBLFNBQUEsR0FBWSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFiLENBQW9CLENBQUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFSLENBQXBCO01BQ1osUUFBQSxHQUFXO2FBQ1gsSUFBQyxDQUFBLFFBQUQsQ0FBVTtRQUFDLEtBQUEsRUFBTyxTQUFSO1FBQW1CLElBQUEsRUFBTTtNQUF6QixDQUFWO0lBTFksQ0FUZDtJQWdCQSxNQUFBLEVBQVEsUUFBQSxDQUFBLENBQUE7YUFDTixHQUFBLENBQUksQ0FBQSxDQUFKLEVBQ0csRUFBQSxDQUFHLENBQUEsQ0FBSCxFQUFPLFdBQVAsQ0FESCxFQUVHLFFBQUEsQ0FBUztRQUFDLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDO01BQWYsQ0FBVCxDQUZILEVBR0csSUFBQSxDQUFLO1FBQUMsUUFBQSxFQUFVLElBQUMsQ0FBQSxZQUFaOztNQUFBLENBQUwsRUFFRSxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVc7TUFBWixDQUFKLEVBQ0UsR0FBQSxDQUFJO1FBQUMsU0FBQSxFQUFXO01BQVosQ0FBSixFQUNFLEdBQUEsQ0FBSTtRQUFDLFNBQUEsRUFBVztNQUFaLENBQUosRUFDRSxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVc7TUFBWixDQUFKLEVBQ0UsS0FBQSxDQUFNO1FBQUMsUUFBQSxFQUFVLElBQUMsQ0FBQSxRQUFaO1FBQXNCLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQXBDO1FBQTBDLFdBQUEsRUFBYSxXQUF2RDtRQUFvRSxJQUFBLEVBQU07TUFBMUUsQ0FBTixDQURGLENBREYsRUFJRSxHQUFBLENBQUk7UUFBQyxTQUFBLEVBQVc7TUFBWixDQUFKLEVBQ0UsQ0FBQSxDQUFFO1FBQUMsU0FBQSxFQUFXLGdCQUFaO1FBQThCLE9BQUEsRUFBUyxJQUFDLENBQUE7TUFBeEMsQ0FBRixFQUF5RCxDQUFBLEtBQUEsQ0FBQSxDQUFRLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQWIsR0FBc0IsQ0FBOUIsQ0FBQSxDQUF6RCxDQURGLENBSkYsQ0FERixDQURGLENBRkYsQ0FISDtJQURNO0VBaEJSLENBRFE7O0VBc0NWLE9BQUEsR0FBVSxRQUFRLENBQUMsY0FBVCxDQUF3QixTQUF4Qjs7RUFDVixPQUFBLEdBQVUsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsT0FBcEIsRUFBNkIsSUFBN0I7O0VBQ1YsS0FBSyxDQUFDLE1BQU4sQ0FBYSxPQUFiLEVBQXNCLE9BQXRCO0FBbkRBIiwic291cmNlc0NvbnRlbnQiOlsie3VsLCBsaSwgZGl2LCBoMiwgZm9ybSwgaW5wdXQsIGEsIGJ1dHRvbn0gPSBSZWFjdC5ET01cblxuVG9kb0xpc3QgPSBSZWFjdC5jcmVhdGVDbGFzc1xuICBkaXNwbGF5TmFtZTogXCJUb2RvTGlzdFwiXG5cbiAgcmVuZGVyOiAtPlxuICAgIGNvbnNvbGUubG9nIFwiVG9kb0xpc3QucmVuZGVyIGNhbGxlZFwiXG4gICAgY3JlYXRlSXRlbSA9IChpdGVtVGV4dCkgLT5cbiAgICAgIGxpIHt9LCBpdGVtVGV4dFxuICAgIHVsIHt9LCBAcHJvcHMuaXRlbXMubWFwIGNyZWF0ZUl0ZW1cblxuVG9kb0FwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzXG4gIGdldEluaXRpYWxTdGF0ZTogLT5cbiAgICB7aXRlbXM6IFtdLCB0ZXh0OiBcIlwifVxuXG4gIGRpc3BsYXlOYW1lOiBcIlRvZG9BcHBcIlxuXG4gIG9uQ2hhbmdlOiAoZSkgLT5cbiAgICBjb25zb2xlLmxvZyBcImNoYW5naW5nIHRvICN7ZS50YXJnZXQudmFsdWV9XCJcbiAgICBAc2V0U3RhdGUgdGV4dDogZS50YXJnZXQudmFsdWVcblxuICBoYW5kbGVTdWJtaXQ6IChlKSAtPlxuICAgIGNvbnNvbGUubG9nIFwiaGFuZGxlU3VibWl0XCIsIGVcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBuZXh0SXRlbXMgPSBAc3RhdGUuaXRlbXMuY29uY2F0IFtAc3RhdGUudGV4dF1cbiAgICBuZXh0VGV4dCA9IFwiXCJcbiAgICBAc2V0U3RhdGUge2l0ZW1zOiBuZXh0SXRlbXMsIHRleHQ6IG5leHRUZXh0fVxuXG4gIHJlbmRlcjogLT5cbiAgICBkaXYoe30sXG4gICAgICAoaDIge30sIFwiVG9kbyBMaXN0XCIpLFxuICAgICAgKFRvZG9MaXN0IHtpdGVtczogQHN0YXRlLml0ZW1zfSksXG4gICAgICAoZm9ybSB7b25TdWJtaXQ6IEBoYW5kbGVTdWJtaXR9LFxuICAgICAgICAjIFRPRE8gVHVybiBhbGwgdGhlc2UgZGl2IGNhbGxzIGludG8gaGVscGVyc1xuICAgICAgICAoZGl2IHtjbGFzc05hbWU6IFwicm93XCJ9LFxuICAgICAgICAgIChkaXYge2NsYXNzTmFtZTogXCJjb2x1bW5zIGxhcmdlLTEyXCJ9LFxuICAgICAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiBcInJvdyBjb2xsYXBzZSBwb3N0Zml4LXJhZGl1c1wifSxcbiAgICAgICAgICAgICAgKGRpdiB7Y2xhc3NOYW1lOiBcInNtYWxsLTkgY29sdW1uc1wifSxcbiAgICAgICAgICAgICAgICAoaW5wdXQge29uQ2hhbmdlOiBAb25DaGFuZ2UsIHZhbHVlOiBAc3RhdGUudGV4dCwgcGxhY2Vob2xkZXI6IFwiYWRkIHRhc2vigKZcIiwgdHlwZTogXCJ0ZXh0XCJ9KVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAoZGl2IHtjbGFzc05hbWU6IFwic21hbGwtMyBjb2x1bW5zXCJ9LFxuICAgICAgICAgICAgICAgIChhIHtjbGFzc05hbWU6IFwiYnV0dG9uIHBvc3RmaXhcIiwgb25DbGljazogQGhhbmRsZVN1Ym1pdH0sIFwiQWRkICMje0BzdGF0ZS5pdGVtcy5sZW5ndGggKyAxfVwiKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuXG5leGFtcGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJleGFtcGxlXCJcbnRvZG9BcHAgPSBSZWFjdC5jcmVhdGVFbGVtZW50IFRvZG9BcHAsIG51bGxcblJlYWN0LnJlbmRlciB0b2RvQXBwLCBleGFtcGxlXG4iXX0=
//# sourceURL=coffeescript